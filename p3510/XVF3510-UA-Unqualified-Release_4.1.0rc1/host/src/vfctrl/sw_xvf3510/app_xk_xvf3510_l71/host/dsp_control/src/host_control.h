// Copyright (c) 2018-2020, XMOS Ltd, All rights reserved
#ifndef _HOST_CONTROL_H_
#define _HOST_CONTROL_H_

#include <control.h>

typedef union int_float {
  int8_t i8;
  uint8_t ui8;
  int32_t i;
  uint32_t ui;
  int64_t i_long;
  uint64_t f0_32;
  uint32_t f1_31;
  int32_t f7_24;
  uint32_t f8_24;
  uint32_t f16_16;
} int_float;


typedef struct {
    int32_t ch_a;  ///< First channel in the pair.
    int32_t ch_b;  ///< Second channel in the pair.
} vtb_ch_pair_t;

#define MAX_PAYLOAD_BYTES           56

#define AEC_MAX_X_CHANNELS          10
#define AEC_COEFFICIENT_CHUNK_SIZE  MAX_PAYLOAD_BYTES // Must match firmware
#define IC_COEFFICIENT_CHUNK_SIZE   MAX_PAYLOAD_BYTES // Must match firmware
#define ADEC_READ_PHASE_POWER_CHUNK_SIZE    40  // Must match firmware 

#define AGC_INPUT_CHANNELS 2

#define I2C_MAX_CMD_SIZE MAX_PAYLOAD_BYTES // Must match firmware
#define SPI_MAX_CMD_SIZE MAX_PAYLOAD_BYTES // Must match firmware
#define SPI_READ_BUF_SIZE MAX_PAYLOAD_BYTES // Must match firmware

#define NUM_STAGES_PER_FILTER 2 // Must match host code
#define NUM_COEFFS_PER_STAGE  5 // Biquads are 5 coeffs per stage
#define NUM_FILTER_COEFFS     (NUM_COEFFS_PER_STAGE * NUM_STAGES_PER_FILTER)
#define Q_FORMAT_FILTER       28 // Must match firmware as specified in ap_control_map.

typedef enum {
    AEC_ADAPTION_AUTO,
    AEC_ADAPTION_FORCE_ON,
    AEC_ADAPTION_FORCE_OFF,
} aec_adaption_e;

typedef enum {
    IC_ADAPTION_FORCE_ON,
    IC_ADAPTION_FORCE_OFF,
} ic_adaption_e;

/*=============================================*/
/* The lines below are automatically generated */
/*=============================================*/

#ifndef _DEVICE_VERSION_H_
#define _DEVICE_VERSION_H_

#ifndef DEVICE_VERSION_MAJOR
#define DEVICE_VERSION_MAJOR     4
#endif

#ifndef DEVICE_VERSION_MINOR
#define DEVICE_VERSION_MINOR     1
#endif

#ifndef DEVICE_VERSION_PATCH
#define DEVICE_VERSION_PATCH     0
#endif

#endif // _DEVICE_VERSION_H_

typedef enum {
    CTRL_DONE,
    CTRL_WAIT,
    CTRL_QUEUE_FULL,
    CTRL_INVALID
} ctrl_flag;

#define USB_STR_MAX_BYTES   26
#define BLD_MSG_LEN         50
#define BLD_HOST_LEN        30
#define BLD_REPO_HASH_LEN   7
#define BLD_XGIT_VIEW_LEN   50
#define BLD_XGIT_HASH_LEN   7
#define BLD_MODIFIED_LEN    6 // Size of "false" plus 1
enum ap_control_ids {
    AP_STAGE_A_CONTROL_ID,
    AP_STAGE_B_CONTROL_ID,
    AP_STAGE_C_CONTROL_ID,
    AP_CONTROL_NUM_IDS
};

enum ap_control_resids {
    AP_STAGE_A_RESID = (AP_STAGE_A_CONTROL_ID + 1) << 4,
    AEC_RESID,
    AP_STAGE_B_RESID = (AP_STAGE_B_CONTROL_ID + 1) << 4,
    IC_RESID,
    VAD_RESID,
    AP_STAGE_C_RESID = (AP_STAGE_C_CONTROL_ID + 1) << 4,
    AGC_RESID,
    SUP_RESID,
    GPIO_RESID = 0xe0,
    AP_CONTROL_RESID = 0xf0
};

const char *output_io_map_str[] = {"USB_FROM_DEVICE_0",
    "USB_FROM_DEVICE_1",
    "I2S_FROM_DEVICE_0",
    "I2S_FROM_DEVICE_1",
    "REF_TO_PIPELINE_0",
    "REF_TO_PIPELINE_1",
    };
typedef enum 
{
    USB_FROM_DEVICE_0 = 0, //USB channel 0 output from device to host
    USB_FROM_DEVICE_1,     //USB channel 1 output from device to host
    I2S_FROM_DEVICE_0,   //I2S channel 0 output from device
    I2S_FROM_DEVICE_1,   //I2S channel 1 output from device
    REF_TO_PIPELINE_0,   //reference channel 0 going into the pipeline
    REF_TO_PIPELINE_1,   //referenfe channel 1 going into the pipeline
    NUM_IO_MAP_OUTPUTS
} output_io_map_t;

const char *input_io_map_str[] = {"NONE",
    "USB_TO_DEVICE_AVERAGE",
    "USB_TO_DEVICE_DIFFERENCE",
    "I2S_TO_DEVICE_AVERAGE",
    "I2S_TO_DEVICE_DIFFERENCE",
    "PIPELINE_OUT_0",
    "PIPELINE_OUT_1",
    "USB_TO_DEVICE_0",
    "USB_TO_DEVICE_1",
    "I2S_TO_DEVICE_0",
    "I2S_TO_DEVICE_1",
    "MIC_IN_0",
    "MIC_IN_1",
    "PACKED_PIPELINE_OUTPUT",
    "PACKED_MIC",
    "PACKED_REF",
    "PACKED_ALL",
    "STATE_REPORT",
};
typedef enum 
{
    NONE = 0,
    USB_TO_DEVICE_AVERAGE,      //Average of USB input from host to device
    USB_TO_DEVICE_DIFFERENCE,   //Difference between ch0 and ch1 of USB input from host to device
    I2S_TO_DEVICE_AVERAGE,      //Average of I2S input to device
    I2S_TO_DEVICE_DIFFERENCE,   //Difference between ch0 and ch1 of I2S input to device
    PIPELINE_OUT_0,             //Pipeline output channel 0
    PIPELINE_OUT_1,             //Pipeline output channel 1
    USB_TO_DEVICE_0,            //USB input channel 0 from host to device
    USB_TO_DEVICE_1,            //USB input channel 1 from host to device
    I2S_TO_DEVICE_0,            //I2S input channel 0 to device
    I2S_TO_DEVICE_1,            //I2S input channel 1 to device
    MIC_IN_0,                   //Ch0 Microphone input seen by the pipeline
    MIC_IN_1,                   //Ch1 Microphone input seen by the pipeline
    PACKED_PIPELINE_OUTPUT,     //pack 16kHz pipeline output on some 48kHz output 
    PACKED_MIC,                 //pack 16kHz mic input to pipeline on some 48kHz output
    PACKED_REF,                 //pack 16kHz reference input to pipeline on some 48kHz output
    PACKED_ALL,              //pack 1 channel of 16kHz mic, reference input and pipeline.:
    STATE_REPORT,               // State report for locker state
    NUM_IO_MAP_INPUTS
} input_io_map_t;

typedef enum
{
    I2S_NOT_STARTED = 0,
    I2S_STARTED_BY_DATA_PARTITION,
    I2S_STARTED_BY_DEFAULT,
    NUM_I2S_STARTED_VALUES
} i2s_start_status_t;

typedef enum
{
    USB_NOT_STARTED = 0,
    USB_STARTED_BY_DATA_PARTITION,
    USB_STARTED_BY_DEFAULT,
    NUM_USB_STARTED_VALUES
} usb_start_status_t;

typedef enum
{
    MIC_NOT_STARTED = 0,
    MIC_STARTED_BY_DATA_PARTITION,
    MIC_STARTED_BY_DEFAULT,
    NUM_MIC_STARTED_VALUES
} mic_start_status_t;

typedef struct 
{
    uint8_t source;
    uint8_t output_shift_value;
    uint8_t output_shift_direction;
} io_map_and_output_shift_t;

typedef enum 
{
    FILTER_USB_FROM_DEVICE_0 = 0, //USB channel 0 output from device to host
    FILTER_USB_FROM_DEVICE_1,     //USB channel 1 output from device to host
    FILTER_I2S_FROM_DEVICE_0,   //I2S channel 0 output from device
    FILTER_I2S_FROM_DEVICE_1,   //I2S channel 1 output from device
    FILTER_MIC_TO_PIPELINE_0,   //microphone channel 0 going into the pipeline
    FILTER_MIC_TO_PIPELINE_1,   //microphone channel 1 going into the pipeline
    FILTER_REF_TO_PIPELINE_0,   //reference channel 0 going into the pipeline
    FILTER_REF_TO_PIPELINE_1,   //reference channel 1 going into the pipeline
    NUM_FILTERS
} output_filter_map_t;

const char *run_status_str[] = {"RUN_INIT",
    "RUN_DATA_PARTITION_NOT_FOUND",
    "RUN_FACTORY_DATA_SUCCESS",
    "RUN_UPGRADE_DATA_SUCCESS",
    "RUN_FACTORY_DATA_IN_PROGRESS",
    "RUN_UPGRADE_DATA_IN_PROGRESS",
    "RUN_DFU_IN_PROGRESS",
    "RUN_HW_BUILD_READ_SUCCESS",
    "RUN_HW_BUILD_PARTITION_SIZE_ERROR",
    "RUN_HW_BUILD_PARTITION_BASE_ERROR",
    "RUN_HW_BUILD_READ_ERROR",
    "RUN_HW_BUILD_CRC_ERROR",
    "RUN_HW_BUILD_TAG_ERROR",
    "RUN_FACTORY_VERSION_ERROR",
    "RUN_UPGRADE_VERSION_ERROR",
    "RUN_FACTORY_ITEM_READ_ERROR",
    "RUN_UPGRADE_ITEM_READ_ERROR",
    "RUN_FACTORY_ITEM_INVALID_TYPE",
    "RUN_UPGRADE_ITEM_INVALID_TYPE",
    "RUN_DFU_FLASH_CONNECT_FAILED",
    "RUN_DFU_FLASH_SPEC_UNSUITABLE",
    "RUN_SPIBOOT_WITH_DEFAULT_SETTINGS",
    "RUN_SPIBOOT_WITH_EXTERNAL_SETTINGS",
};
typedef enum run_status_t {
    RUN_INIT = 0,
    RUN_DATA_PARTITION_NOT_FOUND = 1,
    RUN_FACTORY_DATA_SUCCESS = 2,
    RUN_UPGRADE_DATA_SUCCESS = 3,
    RUN_FACTORY_DATA_IN_PROGRESS = 4,
    RUN_UPGRADE_DATA_IN_PROGRESS = 5,
    RUN_DFU_IN_PROGRESS = 6,

    // Error codes from here on...
    RUN_HW_BUILD_READ_SUCCESS = 7,
    RUN_HW_BUILD_PARTITION_SIZE_ERROR = 8,
    RUN_HW_BUILD_PARTITION_BASE_ERROR = 9,
    RUN_HW_BUILD_READ_ERROR = 10,
    RUN_HW_BUILD_CRC_ERROR = 11,
    RUN_HW_BUILD_TAG_ERROR = 12,
    RUN_FACTORY_VERSION_ERROR = 13,
    RUN_UPGRADE_VERSION_ERROR = 14,
    RUN_FACTORY_ITEM_READ_ERROR = 15,
    RUN_UPGRADE_ITEM_READ_ERROR = 16,
    RUN_FACTORY_ITEM_INVALID_TYPE = 17,
    RUN_UPGRADE_ITEM_INVALID_TYPE = 18,
    RUN_DFU_FLASH_CONNECT_FAILED = 19,
    RUN_DFU_FLASH_SPEC_UNSUITABLE = 20,
    RUN_SPIBOOT_WITH_DEFAULT_SETTINGS = 21,
    RUN_SPIBOOT_WITH_EXTERNAL_SETTINGS = 22
} run_status_t;

typedef enum {
    BOTH_WAIT,
    LOCKER_SEARCH,
    ADEC_TRIGGERED,
    DELAY_PROPAGATING,
    NUM_LOCKER_STATES,
} locker_state_e;

const char *locker_state[] = {"    BOTH_WAIT",
    "    LOCKER_SEARCH",
    "    ADEC_TRIGGERED",
    "    DELAY_PROPAGATING",
    "    NUM_LOCKER_STATES",
};
#define AEC_CMD_GET_ADAPTION_CONFIG 0x84
#define AEC_CMD_GET_BYPASS 0x80
#define AEC_CMD_GET_COEFFICIENT_INDEX 0x90
#define AEC_CMD_GET_ERLE_CH0 0x88
#define AEC_CMD_GET_ERLE_CH1 0x89
#define AEC_CMD_GET_F_BIN_COUNT 0x8E
#define AEC_CMD_GET_FILTER_COEFFICIENTS 0x8F
#define AEC_CMD_GET_FORCED_MU_VALUE 0x83
#define AEC_CMD_GET_FRAME_ADVANCE 0x8A
#define AEC_CMD_GET_MU_LIMITS 0x86
#define AEC_CMD_GET_MU_SCALAR 0x85
#define AEC_CMD_GET_SIGMA_ALPHAS 0x87
#define AEC_CMD_GET_X_CHANNEL_PHASES 0x8D
#define AEC_CMD_GET_X_CHANNELS 0x8C
#define AEC_CMD_GET_X_ENERGY_DELTA 0x81
#define AEC_CMD_GET_X_ENERGY_GAMMA_LOG2 0x82
#define AEC_CMD_GET_Y_CHANNELS 0x8B
#define AEC_CMD_RESET_FILTER 0x09
#define AEC_CMD_SET_ADAPTION_CONFIG 0x04
#define AEC_CMD_SET_BYPASS 0x00
#define AEC_CMD_SET_COEFFICIENT_INDEX 0x08
#define AEC_CMD_SET_FORCED_MU_VALUE 0x03
#define AEC_CMD_SET_MU_LIMITS 0x06
#define AEC_CMD_SET_MU_SCALAR 0x05
#define AEC_CMD_SET_SIGMA_ALPHAS 0x07
#define AEC_CMD_SET_X_ENERGY_DELTA 0x01
#define AEC_CMD_SET_X_ENERGY_GAMMA_LOG2 0x02
#define AP_CONTROL_CMD_GET_BLD_HOST 0x84
#define AP_CONTROL_CMD_GET_BLD_MODIFIED 0x88
#define AP_CONTROL_CMD_GET_BLD_MSG 0x83
#define AP_CONTROL_CMD_GET_BLD_REPO_HASH 0x85
#define AP_CONTROL_CMD_GET_BLD_XGIT_HASH 0x87
#define AP_CONTROL_CMD_GET_BLD_XGIT_VIEW 0x86
#define AP_CONTROL_CMD_GET_DELAY_SAMPLES 0x82
#define AP_CONTROL_CMD_GET_STATUS 0x80
#define AP_CONTROL_CMD_GET_VERSION 0x81
#define AP_CONTROL_CMD_SET_DELAY_SAMPLES 0x00
#define AP_STAGE_A_CMD_GET_ADEC_ENABLED 0x8E
#define AP_STAGE_A_CMD_GET_ADEC_FAR_THRESHOLD 0x96
#define AP_STAGE_A_CMD_GET_ADEC_MODE 0x8F
#define AP_STAGE_A_CMD_GET_ADEC_PEAK_TO_AVERAGE_GOOD_AEC 0x9E
#define AP_STAGE_A_CMD_GET_ADEC_TIME_SINCE_RESET 0x90
#define AP_STAGE_A_CMD_GET_AEC_PEAK_TO_AVERAGE_RATIO 0x97
#define AP_STAGE_A_CMD_GET_AGM 0x91
#define AP_STAGE_A_CMD_GET_ALT_ARCH_ENABLED 0x9B
#define AP_STAGE_A_CMD_GET_DELAY_DIRECTION 0x8A
#define AP_STAGE_A_CMD_GET_DELAY_ESTIMATE 0x8B
#define AP_STAGE_A_CMD_GET_DELAY_ESTIMATOR_ENABLED 0x8C
#define AP_STAGE_A_CMD_GET_ERLE_BAD_BITS 0x92
#define AP_STAGE_A_CMD_GET_ERLE_BAD_GAIN 0x95
#define AP_STAGE_A_CMD_GET_ERLE_GOOD_BITS 0x93
#define AP_STAGE_A_CMD_GET_LOCKER_DELAY_SETPOINT_DIRECTION 0xA1
#define AP_STAGE_A_CMD_GET_LOCKER_DELAY_SETPOINT_ENABLED 0x9F
#define AP_STAGE_A_CMD_GET_LOCKER_DELAY_SETPOINT_SAMPLES 0xA0
#define AP_STAGE_A_CMD_GET_LOCKER_ENABLED 0x9A
#define AP_STAGE_A_CMD_GET_LOCKER_NUM_BAD_FRAMES_THRESHOLD 0x9D
#define AP_STAGE_A_CMD_GET_LOCKER_STATE 0x9C
#define AP_STAGE_A_CMD_GET_MAX_TIME_CONTROL 0x83
#define AP_STAGE_A_CMD_GET_MAX_TIME_DSP 0x85
#define AP_STAGE_A_CMD_GET_MAX_TIME_IDLE 0x89
#define AP_STAGE_A_CMD_GET_MAX_TIME_RX 0x81
#define AP_STAGE_A_CMD_GET_MAX_TIME_TX 0x87
#define AP_STAGE_A_CMD_GET_MIC_SHIFT_SATURATE 0x8D
#define AP_STAGE_A_CMD_GET_MIN_TIME_CONTROL 0x82
#define AP_STAGE_A_CMD_GET_MIN_TIME_DSP 0x84
#define AP_STAGE_A_CMD_GET_MIN_TIME_IDLE 0x88
#define AP_STAGE_A_CMD_GET_MIN_TIME_RX 0x80
#define AP_STAGE_A_CMD_GET_MIN_TIME_TX 0x86
#define AP_STAGE_A_CMD_GET_PEAK_PHASE_ENERGY_TREND_GAIN 0x94
#define AP_STAGE_A_CMD_GET_PHASE_POWER_INDEX 0x99
#define AP_STAGE_A_CMD_GET_PHASE_POWERS 0x98
#define AP_STAGE_A_CMD_RESET_TIME 0x00
#define AP_STAGE_A_CMD_SET_ADEC_ENABLED 0x04
#define AP_STAGE_A_CMD_SET_ADEC_FAR_THRESHOLD 0x0A
#define AP_STAGE_A_CMD_SET_ADEC_PEAK_TO_AVERAGE_GOOD_AEC 0x0F
#define AP_STAGE_A_CMD_SET_ALT_ARCH_ENABLED 0x0D
#define AP_STAGE_A_CMD_SET_DELAY_DIRECTION 0x01
#define AP_STAGE_A_CMD_SET_DELAY_ESTIMATOR_ENABLED 0x02
#define AP_STAGE_A_CMD_SET_ERLE_BAD_BITS 0x06
#define AP_STAGE_A_CMD_SET_ERLE_BAD_GAIN 0x09
#define AP_STAGE_A_CMD_SET_ERLE_GOOD_BITS 0x07
#define AP_STAGE_A_CMD_SET_LOCKER_DELAY_SETPOINT_DIRECTION 0x12
#define AP_STAGE_A_CMD_SET_LOCKER_DELAY_SETPOINT_ENABLED 0x10
#define AP_STAGE_A_CMD_SET_LOCKER_DELAY_SETPOINT_SAMPLES 0x11
#define AP_STAGE_A_CMD_SET_LOCKER_ENABLED 0x0C
#define AP_STAGE_A_CMD_SET_LOCKER_NUM_BAD_FRAMES_THRESHOLD 0x0E
#define AP_STAGE_A_CMD_SET_MANUAL_ADEC_CYCLE_TRIGGER 0x05
#define AP_STAGE_A_CMD_SET_MIC_SHIFT_SATURATE 0x03
#define AP_STAGE_A_CMD_SET_PEAK_PHASE_ENERGY_TREND_GAIN 0x08
#define AP_STAGE_A_CMD_SET_PHASE_POWER_INDEX 0x0B
#define AP_STAGE_B_CMD_GET_MAX_TIME_CONTROL 0x83
#define AP_STAGE_B_CMD_GET_MAX_TIME_DSP 0x85
#define AP_STAGE_B_CMD_GET_MAX_TIME_IDLE 0x89
#define AP_STAGE_B_CMD_GET_MAX_TIME_RX 0x81
#define AP_STAGE_B_CMD_GET_MAX_TIME_TX 0x87
#define AP_STAGE_B_CMD_GET_MIN_TIME_CONTROL 0x82
#define AP_STAGE_B_CMD_GET_MIN_TIME_DSP 0x84
#define AP_STAGE_B_CMD_GET_MIN_TIME_IDLE 0x88
#define AP_STAGE_B_CMD_GET_MIN_TIME_RX 0x80
#define AP_STAGE_B_CMD_GET_MIN_TIME_TX 0x86
#define AP_STAGE_B_CMD_RESET_TIME 0x00
#define AP_STAGE_C_CMD_GET_AGC_ADAPT 0x8C
#define AP_STAGE_C_CMD_GET_AGC_DESIRED_LOWER_THRESHOLD 0x8E
#define AP_STAGE_C_CMD_GET_AGC_DESIRED_UPPER_THRESHOLD 0x8D
#define AP_STAGE_C_CMD_GET_AGC_GAIN 0x8A
#define AP_STAGE_C_CMD_GET_AGC_GAIN_DECREMENT_STEPSIZE 0x90
#define AP_STAGE_C_CMD_GET_AGC_GAIN_INCREMENT_STEPSIZE 0x8F
#define AP_STAGE_C_CMD_GET_AGC_LC_ENABLED 0x93
#define AP_STAGE_C_CMD_GET_AGC_MAX_GAIN 0x8B
#define AP_STAGE_C_CMD_GET_ASR_ALL_CHANNELS 0x91
#define AP_STAGE_C_CMD_GET_MAX_TIME_CONTROL 0x83
#define AP_STAGE_C_CMD_GET_MAX_TIME_DSP 0x85
#define AP_STAGE_C_CMD_GET_MAX_TIME_IDLE 0x89
#define AP_STAGE_C_CMD_GET_MAX_TIME_RX 0x81
#define AP_STAGE_C_CMD_GET_MAX_TIME_TX 0x87
#define AP_STAGE_C_CMD_GET_MIN_TIME_CONTROL 0x82
#define AP_STAGE_C_CMD_GET_MIN_TIME_DSP 0x84
#define AP_STAGE_C_CMD_GET_MIN_TIME_IDLE 0x88
#define AP_STAGE_C_CMD_GET_MIN_TIME_RX 0x80
#define AP_STAGE_C_CMD_GET_MIN_TIME_TX 0x86
#define AP_STAGE_C_CMD_GET_REF_OUT 0x92
#define AP_STAGE_C_CMD_RESET_TIME 0x09
#define AP_STAGE_C_CMD_SET_AGC_ADAPT 0x02
#define AP_STAGE_C_CMD_SET_AGC_DESIRED_LOWER_THRESHOLD 0x04
#define AP_STAGE_C_CMD_SET_AGC_DESIRED_UPPER_THRESHOLD 0x03
#define AP_STAGE_C_CMD_SET_AGC_GAIN 0x00
#define AP_STAGE_C_CMD_SET_AGC_GAIN_DECREMENT_STEPSIZE 0x06
#define AP_STAGE_C_CMD_SET_AGC_GAIN_INCREMENT_STEPSIZE 0x05
#define AP_STAGE_C_CMD_SET_AGC_LC_ENABLED 0x0A
#define AP_STAGE_C_CMD_SET_AGC_MAX_GAIN 0x01
#define AP_STAGE_C_CMD_SET_ASR_ALL_CHANNELS 0x07
#define AP_STAGE_C_CMD_SET_REF_OUT 0x08
#define GPIO_CMD_GET_DEVICE_TO_USB_BIT_RES 0x97
#define GPIO_CMD_GET_DEVICE_TO_USB_RATE 0x95
#define GPIO_CMD_GET_FILTER_BYPASS 0x8D
#define GPIO_CMD_GET_FILTER_COEFF 0x8E
#define GPIO_CMD_GET_FILTER_INDEX 0x8C
#define GPIO_CMD_GET_GPI_INT_PENDING_PIN 0x86
#define GPIO_CMD_GET_GPI_INT_PENDING_PORT 0x87
#define GPIO_CMD_GET_GPI_PIN 0xA2
#define GPIO_CMD_GET_GPI_PORT 0x85
#define GPIO_CMD_GET_GPI_READ_HEADER 0x88
#define GPIO_CMD_GET_HARDWARE_BUILD 0xA1
#define GPIO_CMD_GET_I2C 0x80
#define GPIO_CMD_GET_I2C_READ_HEADER 0x82
#define GPIO_CMD_GET_I2C_WITH_REG 0x81
#define GPIO_CMD_GET_I2S_RATE 0x8F
#define GPIO_CMD_GET_I2S_START_STATUS 0x90
#define GPIO_CMD_GET_IO_MAP_AND_SHIFT 0x8A
#define GPIO_CMD_GET_KWD_BOOT_STATUS 0x89
#define GPIO_CMD_GET_KWD_INTERRUPT_PIN 0x9F
#define GPIO_CMD_GET_MAX_UBM_CYCLES 0x8B
#define GPIO_CMD_GET_MCLK_IN_TO_PDM_CLK_DIVIDER 0x9C
#define GPIO_CMD_GET_MIC_START_STATUS 0x9E
#define GPIO_CMD_GET_RUN_STATUS 0x98
#define GPIO_CMD_GET_SERIAL_NUMBER 0xA0
#define GPIO_CMD_GET_SPI 0x83
#define GPIO_CMD_GET_SPI_READ_HEADER 0x84
#define GPIO_CMD_GET_SYS_CLK_TO_MCLK_OUT_DIVIDER 0x9D
#define GPIO_CMD_GET_USB_BCD_DEVICE 0x99
#define GPIO_CMD_GET_USB_PRODUCT_ID 0x92
#define GPIO_CMD_GET_USB_PRODUCT_STRING 0x9B
#define GPIO_CMD_GET_USB_START_STATUS 0x93
#define GPIO_CMD_GET_USB_TO_DEVICE_BIT_RES 0x96
#define GPIO_CMD_GET_USB_TO_DEVICE_RATE 0x94
#define GPIO_CMD_GET_USB_VENDOR_ID 0x91
#define GPIO_CMD_GET_USB_VENDOR_STRING 0x9A
#define GPIO_CMD_RESET_MAX_UBM_CYCLES 0x0E
#define GPIO_CMD_SET_DEVICE_TO_USB_BIT_RES 0x1A
#define GPIO_CMD_SET_DEVICE_TO_USB_RATE 0x18
#define GPIO_CMD_SET_FILTER_BYPASS 0x10
#define GPIO_CMD_SET_FILTER_COEFF 0x11
#define GPIO_CMD_SET_FILTER_INDEX 0x0F
#define GPIO_CMD_SET_GPI_INT_CONFIG 0x0A
#define GPIO_CMD_SET_GPI_PIN_ACTIVE_LEVEL 0x1F
#define GPIO_CMD_SET_GPI_READ_HEADER 0x0B
#define GPIO_CMD_SET_GPO_FLASHING 0x09
#define GPIO_CMD_SET_GPO_PIN 0x07
#define GPIO_CMD_SET_GPO_PIN_ACTIVE_LEVEL 0x1E
#define GPIO_CMD_SET_GPO_PORT 0x06
#define GPIO_CMD_SET_GPO_PWM_DUTY 0x08
#define GPIO_CMD_SET_I2C 0x00
#define GPIO_CMD_SET_I2C_READ_HEADER 0x02
#define GPIO_CMD_SET_I2C_WITH_REG 0x01
#define GPIO_CMD_SET_I2S_RATE 0x12
#define GPIO_CMD_SET_I2S_START_STATUS 0x13
#define GPIO_CMD_SET_IO_MAP 0x0C
#define GPIO_CMD_SET_KWD_INTERRUPT_PIN 0x24
#define GPIO_CMD_SET_MCLK_IN_TO_PDM_CLK_DIVIDER 0x20
#define GPIO_CMD_SET_MIC_START_STATUS 0x22
#define GPIO_CMD_SET_MONITOR_STATE_USING_GPO_ENABLED 0x23
#define GPIO_CMD_SET_OUTPUT_SHIFT 0x0D
#define GPIO_CMD_SET_SERIAL_NUMBER 0x25
#define GPIO_CMD_SET_SPI_PUSH 0x03
#define GPIO_CMD_SET_SPI_PUSH_AND_EXEC 0x04
#define GPIO_CMD_SET_SPI_READ_HEADER 0x05
#define GPIO_CMD_SET_SYS_CLK_TO_MCLK_OUT_DIVIDER 0x21
#define GPIO_CMD_SET_USB_BCD_DEVICE 0x1B
#define GPIO_CMD_SET_USB_PRODUCT_ID 0x15
#define GPIO_CMD_SET_USB_PRODUCT_STRING 0x1D
#define GPIO_CMD_SET_USB_SERIAL_NUMBER 0x26
#define GPIO_CMD_SET_USB_START_STATUS 0x16
#define GPIO_CMD_SET_USB_TO_DEVICE_BIT_RES 0x19
#define GPIO_CMD_SET_USB_TO_DEVICE_RATE 0x17
#define GPIO_CMD_SET_USB_VENDOR_ID 0x14
#define GPIO_CMD_SET_USB_VENDOR_STRING 0x1C
#define IC_CMD_GET_ADAPTION_CONFIG 0x84
#define IC_CMD_GET_BYPASS 0x80
#define IC_CMD_GET_CH1_BEAMFORM_ENABLE 0x8B
#define IC_CMD_GET_COEFFICIENT_INDEX 0x8A
#define IC_CMD_GET_FILTER_COEFFICIENTS 0x89
#define IC_CMD_GET_FORCED_MU_VALUE 0x83
#define IC_CMD_GET_PHASES 0x87
#define IC_CMD_GET_PROC_FRAME_BINS 0x88
#define IC_CMD_GET_SIGMA_ALPHA 0x85
#define IC_CMD_GET_X_ENERGY_DELTA 0x81
#define IC_CMD_GET_X_ENERGY_GAMMA_LOG2 0x82
#define IC_CMD_RESET_FILTER 0x09
#define IC_CMD_SET_ADAPTION_CONFIG 0x04
#define IC_CMD_SET_BYPASS 0x00
#define IC_CMD_SET_CH1_BEAMFORM_ENABLE 0x0A
#define IC_CMD_SET_COEFFICIENT_INDEX 0x08
#define IC_CMD_SET_FORCED_MU_VALUE 0x03
#define IC_CMD_SET_SIGMA_ALPHA 0x05
#define IC_CMD_SET_X_ENERGY_DELTA 0x01
#define IC_CMD_SET_X_ENERGY_GAMMA_LOG2 0x02
#define SUP_CMD_GET_BYPASS 0x80
#define SUP_CMD_GET_ECHO_SUPPRESSION_ENABLED 0x81
#define SUP_CMD_GET_NOISE_MCRA_NOISE_FLOOR 0x83
#define SUP_CMD_GET_NOISE_SUPPRESSION_ENABLED 0x82
#define SUP_CMD_SET_BYPASS 0x00
#define SUP_CMD_SET_ECHO_SUPPRESSION_ENABLED 0x01
#define SUP_CMD_SET_NOISE_MCRA_NOISE_FLOOR 0x03
#define SUP_CMD_SET_NOISE_SUPPRESSION_ENABLED 0x02

#endif /* _HOST_CONTROL_H_ */
